This document specifies the Hiru-VM bytecode format. Every number represents 2
bytes unless stated otherwise.

THE HEADER
Every Hiru-VM .hbc bytecode file starts with a 4 byte magic number as a header:

  0                                           1
  +----------+----------+----------+----------+
  |        Hiru-VM Magic = 0x48495255         |
  +----------+----------+----------+----------+

INDEX TABLE SEGMENT
  +--------+--------+--------------------------------------------------------+
  | Offset | Length | Description                                            |
  +--------+--------+--------------------------------------------------------+
  | 0      | 1      | The number of entries in the table.                    |
  +--------+--------+--------------------------------------------------------+

INDEX TABLE ENTRY
  +--------+--------+--------------------------------------------------------+
  | Offset | Length | Description                                            |
  +--------+--------+--------------------------------------------------------+
  | 0      | 1      | The type of the segment. Must be one of the following: |
  |        |        |    0x00 - Index Table Segment                          |
  |        |        |    0x01 - Constants Table Segment                      |
  |        |        |    0x02 - Names Table Segment                          |
  |        |        |    0x03 - Bytecode Segment                             |
  +--------+--------+--------------------------------------------------------+
  | 1      | 1      | The offset to the segment, relative to the start of    |
  |        |        | the file.                                              |
  +--------+--------+--------------------------------------------------------+
  | 1      | 1      | The length of the segment, including its header.       |
  +--------+--------+--------------------------------------------------------+

DATA  TABLE SEGMENT
  +--------+--------+--------------------------------------------------------+
  | Offset | Length | Description                                            |
  +--------+--------+--------------------------------------------------------+
  | 0      | 1      | The number of constants in the table.                  |
  +--------+--------+--------------------------------------------------------+

DATA TABLE ENTRY
  +--------+--------+--------------------------------------------------------+
  | Offset | Length | Description                                            |
  +--------+--------+--------------------------------------------------------+
  | 0      | 1      | The type of the constant. Must be one of:              |
  |        |        |    0x00 - No constant                                  |
  |        |        |    0x69 - Integer constant (ASCII 'i')                 |
  |        |        |    0x66 - Floating point number constant (ASCII 'i')   |
  |        |        |    0x73 - String constant (ASCII 's')                  |
  |        |        |    0x63 - Code Obj. constant (ASCII 'c')               |
  +--------+--------+--------------------------------------------------------+

  - Intger Constants:
    +--------+--------+--------------------------------------------------------+
    | Offset | Length | Description                                            |
    +--------+--------+--------------------------------------------------------+
    | 0      | 1      | Null space.                                            |
    +--------+--------+--------------------------------------------------------+
    | 1      | 1      | Integer number. Stored as an Int64.                    |
    +--------+--------+--------------------------------------------------------+

  - Floating point Constants
    +--------+--------+--------------------------------------------------------+
    | Offset | Length | Description                                            |
    +--------+--------+--------------------------------------------------------+
    | 0      | 1      | Null space.                                            |
    +--------+--------+--------------------------------------------------------+
    | 1      | 1      | Floating point number. Stored as a Float64.            |
    +--------+--------+--------------------------------------------------------+

  - String Constants:
    # TODO: Be able to specify encoding type.
    +--------+--------+--------------------------------------------------------+
    | Offset | Length | Description                                            |
    +--------+--------+--------------------------------------------------------+
    | 0      | 1      | Length of the string data in bytes.                    |
    +--------+--------+--------------------------------------------------------+
    | 1      | n      | String data with trailing zero padding as required.    |
    +--------+--------+--------------------------------------------------------+

  - Code Object Constants
    +--------+--------+--------------------------------------------------------+
    | Offset | Length | Description                                            |
    +--------+--------+--------------------------------------------------------+
    | 0      | 1      | Code object data length                                |
    +--------+--------+--------------------------------------------------------+
    | 1      | n      | Code object data                                       |
    +--------+--------+--------------------------------------------------------+

BYTECODE SEGMENT
  Each opcode has a length of 1 byte.
  +--------+--------+--------------------------------------------------------+
  | Offset | Length | Description                                            |
  +--------+--------+--------------------------------------------------------+
  | 0      | 1      | A Hiru-VM opcode.                                      |
  +--------+--------+--------------------------------------------------------+

  And each instruction takes exactly one argument.
  +--------+--------+--------------------------------------------------------+
  | Offset | Length | Description                                            |
  +--------+--------+--------------------------------------------------------+
  | 0      | 1      | An integer (represented as 1 byte).                    |
  +--------+--------+--------------------------------------------------------+

# TODO: Segment to store arbitrary info (file names, line numbers, etc).


EXAMPLE
Here's an example program that prints "¡Hola, Mundo!"

import "io"

concat = function(s1, s2) {
    return s1 + s2;
}

main = function() {
    a = "¡Hola";
    b = "Mundo!";
    c = concat(concat(a, ", "), b);
    io.println(c);
}

main();

Once compiled and disassembled, the structure of the bytecode will look
something like this:

HIRU
SEGMENT .index 4
      index_table 4 52
      data_table 56 418
      name_table 474 22
      code_table 496 84
SEGMENT .data 3
      String 2 "io"
      Function 108
            SEGMENT .index 4
                  index_table 78 52
                  data_table 130 4
                  name_table 134 16
                  code_table 150 36
            SEGMENT .data 0
            SEGMENT .name 2
                  2 s1
                  2 s2
            SEGMENT .code 4
                  lname 0
                  lname 1
                  badd 
                  ret 
      Function 280
            SEGMENT .index 4
                  index_table 142 52
                  data_table 194 42
                  name_table 236 46
                  code_table 282 140
            SEGMENT .data 3
                  String 6 "¡Hola"
                  String 2 ", "
                  String 6 "Mundo!"
            SEGMENT .name 6
                  1 a
                  1 b
                  1 c
                  6 concat
                  2 io
                  7 println
            SEGMENT .code 17
                  lconst 0
                  sname 0
                  lconst 2
                  sname 1
                  lname 3
                  lname 3
                  lname 0
                  lconst 1
                  callfn 2
                  lname 1
                  callfn 2
                  sname 2
                  lname 4
                  lattr 5
                  lname 2
                  callfn 1
                  ret 
SEGMENT .name 2
      6 concat
      4 main
SEGMENT .code 10
      lconst 0
      makemod 
      lconst 1
      makefn 
      sname 0
      lconst 2
      makefn 
      sname 1
      lname 1
      callfn 0
